# -*- coding: future_fstrings -*-
import peewee
import models
import pyexcel as pe

# Takes an .ods spreadsheet and inserts it into mEGAdata DB as table entries.
# Works with multiple spreadsheet sheets.
# Works best if there is only one blank row between spreadsheet tables (don't know why...)

# .ods spreadsheet
importFile = "/home/assez/Documents/projectDocs/EMC_Community/allEMCcommunity.ods"

# table rows in the spreadsheet.  Start at header row, end at last row of data.
# Rightmost COMMENTS columns may be skipped by defining col_limit.
# Peewee likes to define its own id's, so leftmost id columns are always ignored.  Don't include them in the col_limit count.
tables = []

# EMC1 - Data divisions
tables.append({'sheet':'EMC1', 'name':'donor', 'start':2, 'end':3})
tables.append({'sheet':'EMC1', 'name':'donor_metadata', 'start':6, 'end':12, 'col_limit':3})
tables.append({'sheet':'EMC1', 'name':'sample', 'start':15, 'end':16})
tables.append({'sheet':'EMC1', 'name':'sample_metadata', 'start':19, 'end':30, 'col_limit':3})
tables.append({'sheet':'EMC1', 'name':'dataset', 'start':33, 'end':41, 'col_limit':6})
tables.append({'sheet':'EMC1', 'name':'run', 'start':44, 'end':59})
tables.append({'sheet':'EMC1', 'name':'run_file', 'start':62, 'end':92})
tables.append({'sheet':'EMC1', 'name':'public_track', 'start':95, 'end':113, 'col_limit':8})

# EMC2 - Data divisions
tables.append({'sheet':'EMC2', 'name':'donor', 'start':2, 'end':3})
tables.append({'sheet':'EMC2', 'name':'donor_metadata', 'start':6, 'end':6})
tables.append({'sheet':'EMC2', 'name':'sample', 'start':9, 'end':13})
tables.append({'sheet':'EMC2', 'name':'sample_metadata', 'start':16, 'end':64, 'col_limit':3})
tables.append({'sheet':'EMC2', 'name':'dataset', 'start':67, 'end':99, 'col_limit':6})
tables.append({'sheet':'EMC2', 'name':'run', 'start':102, 'end':134})
tables.append({'sheet':'EMC2', 'name':'run_file', 'start':137, 'end':201})
tables.append({'sheet':'EMC2', 'name':'public_track', 'start':204, 'end':244, 'col_limit':8})

# EMC3 - Data divisions
tables.append({'sheet':'EMC3', 'name':'donor', 'start':2, 'end':3})
tables.append({'sheet':'EMC3', 'name':'donor_metadata', 'start':6, 'end':6})
tables.append({'sheet':'EMC3', 'name':'sample', 'start':9, 'end':12})
tables.append({'sheet':'EMC3', 'name':'sample_metadata', 'start':15, 'end':57, 'col_limit':3})
tables.append({'sheet':'EMC3', 'name':'dataset', 'start':60, 'end':84, 'col_limit':6})
tables.append({'sheet':'EMC3', 'name':'run', 'start':87, 'end':129})
tables.append({'sheet':'EMC3', 'name':'run_file', 'start':132, 'end':216})
tables.append({'sheet':'EMC3', 'name':'public_track', 'start':219, 'end':267, 'col_limit':8})

def convertTableNameToModelName(table_name):
    if table_name in ['donor', 'sample', 'dataset', 'run']:
        return table_name.capitalize()
    elif table_name == 'donor_metadata':
        return "DonorMetadata"
    elif table_name == 'sample_metadata':
        return "SampleMetadata"
    elif table_name == 'run_file':
        return "RunFile"
    elif table_name == 'public_track':
        return "PublicTrack"

def main():
    for table in tables:
        records = pe.get_records(file_name=importFile, sheet_name=table['sheet'],\
            name_columns_by_row=0,\
            start_row=table['start'] - 1, row_limit=table['end'] - table['start'] + 1,\
            column_limit=table['col_limit'] if 'col_limit' in table else -1,\
            start_column=1 # Skip leftmost id columns which need to be autogenerated be Peewee anyways.
            )

        # Instantiate the correct peewee model class
        _class = getattr(models, convertTableNameToModelName(table['name']))
        myModel = _class()

        print(f"Working on sheet {table['sheet']}, table: {table['name']}")
        for record in records:
            try:
                print(f"Inserting {table['name']} with id: {myModel.insert(record).execute()}")
            except:
                print(f"Error inserting a {table['name']} record.")
                quit()
            # for key, value in record.items():
                # print(f"{key}: {value}")

if __name__ == "__main__":
  main()
